@page "/contact"
@using contacts.Client.Domain
@using contacts.Shared.Result
@using System.ComponentModel
@inject IContactService ContactService
@inject ICategoryService CategoryService
@inject ILogger<EditContact> Logger
@inject NavigationManager NavigationManager
<AuthorizeView>
    <Authorized>
        @if (loading)
        {
            <h3>Please wait...</h3>
        }
        else
        {
            <div>
                <h3>Create contact</h3>
                @if (_error != "")
                {
                    <div class="alert alert-danger" role="alert">
                        @_error
                    </div>
                }
                <EditForm Context="formContext" Model="@_contact" OnSubmit="@FormSubmitted">
                    <div class="form-group">
                        <label for="firstName">First Name:</label>
                        <InputText @bind-Value="_contact.FirstName" id="firstName" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="lastName">Last Name:</label>
                        <InputText @bind-Value="_contact.LastName" id="lastName" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="email">Email:</label>
                        <InputText @bind-Value="_contact.Email" id="email" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="password">Password:</label>
                        <InputText @bind-Value="_contact.Password" id="password" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="phoneNumber">Phone Number:</label>
                        <InputText @bind-Value="_contact.PhoneNumber" id="phoneNumber" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="birthDate">Birth Date:</label>
                        <InputDate @bind-Value="_contact.BirthDate" id="birthDate" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="category">Category:</label>
                        <select id="category" @bind="_contact.CategoryId">
                            @foreach (var c in _categoriesWithSub.CategoryDictionary.Keys)
                            {
                                <option value=@c.Id>@c.Name</option>
                            }
                        </select>
                    </div>
                    @if (_contact.CategoryId != 0)
                    {
                        <div class="form-group">
                            <label for="subcategory">Sub category:</label>
                            @if (_contact.CategoryId == 3)
                            {
                                <InputText @bind-Value="_contact.SubCategory.Name" id="subcategory" class="form-control"/>
                            }
                            else
                            {
                                <select id="subcategory" @bind="_contact.SubCategoryId">
                                    @foreach (var c in FindSubCategories(_contact.CategoryId))
                                    {
                                        <option value=@c.Id>@c.Name</option>
                                    }
                                </select>
                            }
                        </div>
                    }
                    <input type="submit" value="Submit" class="btn btn-primary"/>
                </EditForm>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <h3>You don't have permission to modify contacts.</h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    AllCategoriesWithSub _categoriesWithSub = new AllCategoriesWithSub();

    Contact _contact = new Contact
    { CategoryId = 0, Category = new Category(), SubCategoryId = null, SubCategory = new SubCategory() };

    string _error = "";
    bool loading = true;

    private IEnumerable<SubCategory> FindSubCategories(int categoryId)
    {
        var category =
            _categoriesWithSub.CategoryDictionary.Keys.First(e => e.Id == categoryId);
        return _categoriesWithSub.CategoryDictionary[category];
    }

    private bool CheckIfOther()
    {
        return _categoriesWithSub.CategoryDictionary.Keys.FirstOrDefault(e => e.Id == _contact.CategoryId)?.Name == "Other";
    }

    protected override async void OnInitialized()
    {
        var res = await CategoryService.GetAllCategories();
        if (!res.Succeeded)
        {
            _error = res.Error.Description;
            Logger.LogInformation("Error! " + res.Error.Description);
            return;
        }
        _categoriesWithSub = res.Data!;

        loading = false;
        StateHasChanged();
    }

    private async void FormSubmitted()
    {
        CreateContact contactFormForSubmit = new CreateContact
        {
            FirstName = _contact.FirstName,
            LastName = _contact.LastName,
            Email = _contact.Email,
            Password = _contact.Password,
            PhoneNumber = _contact.PhoneNumber,
            BirthDate = _contact.BirthDate,
            CategoryId = _contact.CategoryId,
            SubCategoryId = _contact.SubCategoryId,
            SubCategoryName = _contact.SubCategory.Name
        };

        Result<Empty> res;
        res = await ContactService.CreateNewContact(contactFormForSubmit);

        if (res.Succeeded)
        {
            NavigationManager.NavigateTo("/list");
        }
        else
        {
            _error = res.Error!.Description;
            Logger.LogInformation(res.Error.Description);
            StateHasChanged();
        }
    }

}